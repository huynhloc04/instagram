name: Build and Deploy Flask app.

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  IMAGE_NAME: ${{secrets.DOCKERHUB_USERNAME}}/instagram

jobs:
    build:
        name: Build and Test
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install Python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ env.PYTHON_VERSION }}
            cache: 'pip'

        - name: Cache Poetry dependencies
          uses: actions/cache@v3
          with:
            path: ~/.cache/pypoetry
            key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
            restore-keys: |
              ${{ runner.os }}-poetry-

        - name: Install poetry
          uses: snok/install-poetry@v1
          with:
            version: ${{ env.POETRY_VERSION }}
            virtualenvs-create: true

        - name: Install dependencies with Poetry
          run: poetry install --no-interaction

        - name: Run tests
          run: poetry run pytest || echo "No tests found"

        - name: Lint with black
          run: poetry run black . --check

    docker:
        name: Docker Build and Push
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

        steps:
          - name: Checkout Code
            uses: actions/checkout@v4

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Cache Docker layers
            uses: actions/cache@v3
            with:
              path: /tmp/.buildx-cache
              key: ${{ runner.os }}-buildx-${{ github.sha }}
              restore-keys: |
                ${{ runner.os }}-buildx-

          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Extract metadata for Docker
            id: meta
            uses: docker/metadata-action@v5
            with:
              images: ${{ env.IMAGE_NAME }}
              tags: |
                type=ref,event=branch
                type=sha,format=long
                latest

          - name: Build and push
            uses: docker/build-push-action@v5
            with:
              context: .
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
              cache-from: type=local,src=/tmp/.buildx-cache
              cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

          - name: Move cache
            run: |
              rm -rf /tmp/.buildx-cache
              mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    deploy:
        name: Deploy to GCE
        runs-on: ubuntu-latest
        needs: docker
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        environment:
          name: ${{ github.ref_name }}
          url: https://${{ secrets.SERVER_HOST }}

        steps:
          - name: Create SSH directory
            run: mkdir -p ~/.ssh/

          - name: Add host key
            run: |
              ssh-keyscan -H ${{secrets.SERVER_HOST}} >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts

          - name: Deploy via SSH
            uses: appleboy/ssh-action@v1.2.0
            with:
              host: ${{secrets.SERVER_HOST}}
              username: ${{secrets.SERVER_USER}}
              key: ${{ secrets.SSH_PRIVATE_KEY }}
              passphrase: ${{ secrets.PASSPHRASE || '' }}
              script_stop: true
              command_timeout: "30m"
              script: |
                set -e
                echo "Starting deployment process..."
                
                # Navigate to the deploy directory
                cd /opt/instagram
                
                # Pull the latest image (with retry mechanism)
                for i in {1..3}; do
                  if docker pull ${{ env.IMAGE_NAME }}:${GITHUB_SHA}; then
                    break
                  fi
                  echo "Retry $i: Docker pull failed, waiting 10s..."
                  sleep 10
                done
                
                # Stop and remove the existing container
                if docker ps -a | grep -q instagram-backend; then
                  echo "Stopping existing container..."
                  docker stop instagram-backend || true
                  docker rm instagram-backend || true
                fi
                
                # Run the new container
                echo "Starting new container..."
                docker run -d \
                  --name instagram-backend \
                  --restart unless-stopped \
                  --env-file ./.env \
                  -p 8000:8000 \
                  --health-cmd "curl -f http://localhost:8000/health || exit 1" \
                  --health-interval 30s \
                  --health-timeout 10s \
                  --health-retries 3 \
                  ${{ env.IMAGE_NAME }}:${GITHUB_SHA}
                
                # Wait for container to be healthy
                echo "Waiting for container to be healthy..."
                timeout 300s bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} instagram-backend)" != "healthy" ]]; do sleep 5; done'
                
                # Verify the container is running and healthy
                if ! docker ps | grep -q instagram-backend; then
                  echo "Container failed to start. Checking logs..."
                  docker logs instagram-backend
                  exit 1
                fi
                
                echo "Deployment completed successfully!"

              

