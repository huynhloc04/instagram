# Event: On Pull Request â†’ any branch into develop/main

# Jobs:
#  - Build
#  - Unit Test with matrix
#  - Deploy
# Description:
# This workflow will trigger for any pull request into develop/main. It will build and then test the app with a test matrix. The results of this workflow are visible in the pull request. 
# Afterwards the docker image instagram:stage will be built and pushed to the image repository.


name: Build Pipeline

on:
  pull_request:
    branches:
      - develop
      - main

jobs:
  format:
    name: Code Quality Checks
    runs-on: [self-hosted, V1]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8

    - name: Lint with black
      run: black . --check

    # - name: Lint with flake8
    #   run: flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  # test:
  #   name: Test with Docker Compose
  #   runs-on: [self-hosted, V1]
  #   needs: format

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Create env file
  #     run: |
  #       echo "FLASK_APP=app.main" > .env
  #       echo "FLASK_ENV=testing" >> .env
  #       echo "REDIS_URL=redis://redis:6379/0" >> .env

  #   - name: Build and test
  #     run: |
  #       docker compose build
  #       docker compose up -d
  #       # Wait for services to be ready
  #       sleep 10
  #       # Run tests
  #       docker compose exec -T app pytest
        
  #   - name: Cleanup
  #     run: docker compose down

  build:
    name: Build and Push Docker Images
    needs: [format]
    runs-on: [self-hosted, V1]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/instagram:latest
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/instagram:latest
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache