name: Build and Deploy Instagram Backend.

on:
    push:
        branches:
            - develop
            - main
    pull_request:
        types: [closed]
        branches:
            - develop
            - main

jobs:
    build:
        name: Build Flask project
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.11"

        - name: Install poetry
          uses: snok/install-poetry@v1

        - name: Install dependencies with Poetry
          run: poetry install

        # - name: Run tests
        #   run: poetry run pytest

        - name: Lint with black
          run: poetry run black .

    docker:
        name: Docker Build and Push
        runs-on: ubuntu-latest
        needs: build

        steps:
          - name: Checkout Code.
            uses: actions/checkout@v4

          - name: Login with Docker Hub.
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Build Docker Image
            run: |
              docker build -t ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest .

          - name: Docker Push Image
            run: |
              docker push ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest

    deploy:
        name: Deploy to GCE
        runs-on: ubuntu-latest
        needs: docker

        steps:
          - name: Create SSH directory
            run: |
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
            
          - name: Add host key
            run: |
              ssh-keyscan -H "${{secrets.SERVER_HOST}}" >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts

          - name: Deploy via SSH
            uses: appleboy/ssh-action@v1.2.0
            with: 
              host: ${{secrets.SERVER_HOST}}
              username: ${{secrets.SERVER_USER}}
              key: ${{ secrets.SSH_PRIVATE_KEY }}
              passphrase: ${{ secrets.PASSPHRASE || '' }}
              script_stop: true
              command_timeout: "30m"
              script: |
                set -e
                echo "Starting deployment process..."
                
                # Navigate to the deploy directory
                cd /opt/instagram
                
                # Pull the latest image (with retry mechanism)
                for i in {1..3}; do
                  if docker pull ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest; then
                    break
                  fi
                  echo "Retry $i: Docker pull failed, waiting 10s..."
                  sleep 10
                done
                
                # Stop and remove the existing container
                if docker ps -a | grep -q instagram-backend; then
                  echo "Stopping existing container..."
                  docker stop instagram-backend || true
                  docker rm instagram-backend || true
                fi
                
                # Run the new container with proper networking and restart policy
                echo "Starting new container..."
                docker run -d \
                  --name instagram-backend \
                  --restart unless-stopped \
                  --env-file ./.env \
                  -p 8000:8000 \
                  ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest
                
                # Verify the container is running
                if ! docker ps | grep -q instagram-backend; then
                  echo "Container failed to start. Checking logs..."
                  docker logs instagram-backend
                  exit 1
                fi
                
                echo "Deployment completed successfully!"
