# Event: On push → develop/main

# Jobs:
#  - Build
#  - Test matrix → unnecessary if main is a protected branch
#  - Deploy
# Description:
# This workflow will trigger when a commit is pushed to develop/main or a pull request is merged/pushed. 
# It will build and then test the app with a test matrix → This step is unnecessary if main is a protected branch and you could only commit changed via Pull Request.
# Afterwards the docker image instagram:latest will be built and pushed to the image repository.

# We can separate deploy to develop and main to different workflows since they are different environments.

name: Deploy to Production

on:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    name: Deploy to GCE
    # runs-on: [self-hosted, V1]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: [V1, V2]
        include:
          - server: V1
            host: FLASK_V1_HOST
          - server: V2
            host: FLASK_V2_HOST

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH and add host key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H "${{secrets[matrix.host]}}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets[matrix.host]}}
          username: ${{secrets.GENERAL_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            if [ ! -d "/opt/instagram" ]; then
              echo "Creating /opt/instagram directory..."
              sudo mkdir -p /opt/instagram
              sudo chown -R "${{ secrets.GENERAL_USER }}":"${{ secrets.GENERAL_USER }}" /opt/instagram/
            else
              cd /opt/instagram/
              if [ -f "docker-compose.yml" ]; then
                echo "Stopping existing services..."
                docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml down --remove-orphans
              fi
              echo "Cleaning directory..."
              find . -mindepth 1 -delete
            fi

      - name: Copy Configuration Files
        uses: appleboy/scp-action@v1
        with:
          host: ${{secrets[matrix.host]}}
          username: ${{secrets.GENERAL_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "docker-compose.yml,docker-compose.prod.yml"
          target: "/opt/instagram/"

      - name: Deploy Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets[matrix.host]}}
          username: ${{secrets.GENERAL_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd /opt/instagram/
            chmod 644 docker-compose.yml docker-compose.prod.yml
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            export DOCKER_IMAGE=${{secrets.DOCKERHUB_USERNAME}}/instagram:latest
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml pull
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml up -d

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets[matrix.host]}}
          username: ${{secrets.GENERAL_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script_stop: true
          script: |
            cd /opt/instagram/
            if ! docker compose ps | grep -q "Up"; then
              echo "Deployment failed on Flask ${{ matrix.server }}. Checking logs..."
              docker compose logs
              exit 1
            fi
            echo "Deployment on Flask ${{ matrix.server }} verified successfully!"
            docker image prune -f
