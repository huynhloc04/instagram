# Event: On push → develop/main

# Jobs:
#  - Build
#  - Test matrix → unnecessary if main is a protected branch
#  - Deploy
# Description:
# This workflow will trigger when a commit is pushed to develop/main or a pull request is merged/pushed. 
# It will build and then test the app with a test matrix → This step is unnecessary if main is a protected branch and you could only commit changed via Pull Request.
# Afterwards the docker image instagram:latest will be built and pushed to the image repository.

# We can separate deploy to develop and main to different workflows since they are different environments.

name: Deploy to Production

on:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    name: Deploy to GCE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

      - name: Setup SSH and add host key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H "${{secrets.SERVER_HOST}}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      
      
      - name: Setup Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            if [ -d "/opt/instagram" ]; then
                cd /opt/instagram/
                if [ -f "docker-compose.yml" ]; then
                  echo "Existing compose file found. Stopping services..."
                  docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml down --remove-orphans
                fi
                echo "Cleaning directory for new deployment..."
                find . -mindepth 1 -delete
              else
                echo "Directory /opt/instagram not found. Creating it."
                sudo mkdir -p /opt/instagram
                sudo chown -R "${{ secrets.SERVER_USER }}":"${{ secrets.SERVER_USER }}" /opt/instagram/
              fi
            

      - name: Create .env file
        run: |
          echo "# Autogenerated .env file" > .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> .env
          echo "BUCKET_FOLDER=${{ secrets.BUCKET_FOLDER }}" >> .env
          echo "JWT_ACCESS_TOKEN_EXPIRES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRES }}" >> .env
          echo "JWT_REFRESH_TOKEN_EXPIRES=${{ secrets.JWT_REFRESH_TOKEN_EXPIRES }}" >> .env
          echo "RATELIMIT_STORAGE_URL=${{ secrets.RATELIMIT_STORAGE_URL }}" >> .env
          
          #   Add permission to files
          chmod 644 docker-compose.yml docker-compose.prod.yml .env


      - name: Copy files to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "docker-compose.yml,docker-compose.prod.yml,.env,nginx.conf"
          target: "/opt/instagram/"
          script: echo "Files copied successfully to /opt/instagram/"


      # https://github.com/hoverkraft-tech/compose-action
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            export DOCKER_IMAGE=${{secrets.DOCKERHUB_USERNAME}}/instagram:latest
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            cd /opt/instagram/
            chmod 644 docker-compose.yml docker-compose.prod.yml .env
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml pull
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml up -d

          
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script_stop: true
          script: |
            cd /opt/instagram/
            if ! docker compose ps | grep -q "Up"; then
              echo "Containers failed to start. Checking logs..."
              docker compose logs
              exit 1
            fi
            echo "Deployment verified successfully!"
            docker image prune -f
