# Event: On push → develop/main

# Jobs:
#  - Build
#  - Test matrix → unnecessary if main is a protected branch
#  - Deploy
# Description:
# This workflow will trigger when a commit is pushed to develop/main or a pull request is merged/pushed. 
# It will build and then test the app with a test matrix → This step is unnecessary if main is a protected branch and you could only commit changed via Pull Request.
# Afterwards the docker image instagram:latest will be built and pushed to the image repository.

# We can separate deploy to develop and main to different workflows since they are different environments.

name: Deploy Instagram Backend to Production.

on:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    name: Deploy to GCE
    runs-on: ubuntu-latest

    steps:
      - name: Create SSH directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
        
      - name: Add host key
        run: |
          ssh-keyscan -H "${{secrets.SERVER_HOST}}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with: 
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE || '' }}
          script_stop: true
          command_timeout: "30m"
          script: |
            set -e
            echo "Starting deployment process..."
            
            # Navigate to the deploy directory
            cd /opt/instagram
            
            # Pull the latest image (with retry mechanism)
            for i in {1..3}; do
              if docker pull ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest; then
                break
              fi
              echo "Retry $i: Docker pull failed, waiting 10s..."
              sleep 10
            done
            
            # Stop and remove the existing container
            if docker ps -a | grep -q instagram-backend; then
              echo "Stopping existing container..."
              docker stop instagram-backend || true
              docker rm instagram-backend || true
            fi
            
            # Run the new container with proper networking and restart policy
            echo "Starting new container..."
            docker run -d \
              --name instagram-backend \
              --restart unless-stopped \
              --env-file ./.env \
              -v /opt/instagram/gcs.json:/app/gcs.json \
              -p 8000:8000 \
              ${{secrets.DOCKERHUB_USERNAME}}/instagram:latest
            
            # Verify the container is running
            if ! docker ps | grep -q instagram-backend; then
              echo "Container failed to start. Checking logs..."
              docker logs instagram-backend
              exit 1
            fi
            
            echo "Deployment completed successfully!"
